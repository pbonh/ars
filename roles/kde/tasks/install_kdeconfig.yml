---
- name: KWin | Apply KWin Activity Definitions | kdeconfig
  community.general.kdeconfig:
    path: "{{ kwin_activity_config_file }}"
    values:
      - group: "{{ kwin_activity_group }}"
        key: "{{ item.value.uuid }}"
        value: "{{ item.value.name }}"
      - groups: "{{ kwin_activity_description_subgroup }}"
        key: "{{ item.value.uuid }}"
        value: "{{ item.value.description }}"
      - groups: "{{ kwin_activity_icon_subgroup }}"
        key: "{{ item.value.uuid }}"
        value: "{{ item.value.icon }}"
    backup: true
  loop: "{{ kwin_activities | dict2items }}"

- name: KWin | Apply KWin Window Rules | kdeconfig
  community.general.kdeconfig:
    path: "{{ kwin_rules_config_file }}"
    values: >
      {%- set rules_list = [] -%}
      {%- for rule in kwin_rules.values() -%}
        {%- set grp = rule.group -%}
        {%- for key, val in rule.items() if key != 'group' -%}
          {%- set _ = rules_list.append({'group': grp, 'key': key, 'value': val}) -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ rules_list }}
    backup: true

- name: KWin | Apply KWin Window Rules(General Section) | kdeconfig
  community.general.kdeconfig:
    path: "{{ kwin_rules_config_file }}"
    values:
      - group: General
        key: count
        value: "{{ kwin_rules | length }}"
      - group: General
        key: rules
        value: "{{ kwin_rules | dict2items | map(attribute='value.group') | join(',') }}"
    backup: true

- name: Plasma | Panel favorites per activity | kdeconfig
  community.general.kdeconfig:
    path: "{{ kde_plasma_config_file }}"
    values: >
      {# Target Task Manager applet General groups as nested tokens.
         Override with a list of token-lists in `kde_panel_fav_groups`
         e.g. [['Containments','2','Applets','5','Configuration','General']] #}
      {%- set groups_tokens = kde_panel_fav_groups
            | default([['Containments','2','Applets','5','Configuration','General']]) -%}

      {# Build activity -> [desktop ids] map from kwin_rules. #}
      {%- set favs = {} -%}
      {%- for _name, rule in kwin_rules.items() -%}
        {%- set parts = rule.wmclass.split(' ') -%}
        {%- set base = rule.desktop
                      | default(parts[1] if (parts|length > 1 and ('.' in parts[1])) else parts[0]) -%}
        {%- set desktop = base if base.endswith('.desktop') else base ~ '.desktop' -%}
        {%- set act = rule.activity -%}
        {%- if act in favs -%}
          {%- if desktop not in favs[act] -%}
            {%- set _ = favs[act].append(desktop) -%}
          {%- endif -%}
        {%- else -%}
          {%- set _ = favs.update({ (act): [desktop] }) -%}
        {%- endif -%}
      {%- endfor -%}

      {# Compose launchers tokens and newline-separated value. #}
      {%- set tokens = [] -%}
      {%- for act in (favs.keys() | list | sort) -%}
        {%- for app in (favs[act] | sort) -%}
          {%- set _ = tokens.append('[' ~ act ~ ']\napplications:' ~ app) -%}
        {%- endfor -%}
      {%- endfor -%}

      {# Emit entries for each target group using nested `groups`. #}
      {%- set result = [] -%}
      {%- for grp in groups_tokens -%}
        {%- set val = (tokens | join(',')) -%}
        {%- set _ = result.append({'groups': grp, 'key': 'launchers', 'value': val}) -%}
      {%- endfor -%}
      {{ result }}
    backup: true
