---
nvim_codecompanion: true
ai_adapter_avante: "claude"
ai_adapter_chat: "ollama"
ai_adapter_inline: "{{ ai_adapter_chat }}"
ai_adapter_cmd: "{{ ai_adapter_chat }}"
anthropic_api_key: "{{ lookup('env', 'ANTHROPIC_API_KEY') }}"
openai_api_key: "{{ lookup('env', 'OPENAI_API_KEY') }}"
ollama_port: "11434"
ollama_address: "http://localhost:{{ ollama_port }}"
nvim_codecompanion_adapter_config_ollama: |
        ollama = function()
          return require("codecompanion.adapters").extend("ollama", {
            env = {
              url = "{{ ollama_address }}",
            },
          })
        end,
nvim_codecompanion_adapter_config_openai: |
        openai = function()
          return require("codecompanion.adapters").extend("openai", {
            env = {
              api_key = "{{ openai_api_key }}"
            },
          })
        end,
default_ctx_size: 16384
user_llama_model_info:
  llama3_model_info:
    name: "llama3"
    model_name: "llama3"
    model_tag: "latest"
    model_ctx: "{{ default_ctx_size }}"
  deepseek_r1_model_info:
    name: "deepseek_r1"
    model_name: "deepseek-r1"
    model_tag: "32b"
    model_ctx: "{{ default_ctx_size }}"
nvim_codecompanion_adapter_config_user: |
        {% for model_name in user_llama_model_info -%}
        {% set llama_model_info = user_llama_model_info[model_name] %}
        {{ llama_model_info['name'] }} = function()
          return require("codecompanion.adapters").extend("ollama", {
            name = "{{ llama_model_info['name'] }}",
            schema = {
              model = {
                default = "{{ llama_model_info['model_name'] }}:{{ llama_model_info['model_tag'] }}",
              },
              num_ctx = {
                default = {{ llama_model_info['model_ctx'] }},
              },
              num_predict = {
                default = -1,
              },
            },
          })
        end,
        {% endfor %}
nvim_codecompanion_adapter_config: |
      adapters = {
        {{ nvim_codecompanion_adapter_config_ollama }}
        {{ nvim_codecompanion_adapter_config_openai }}
        {{ nvim_codecompanion_adapter_config_user }}
      },
nvim_codecompanion_prompt_library_docusaurus: |
        ["Docusaurus"] = {
          strategy = "chat",
          description = "Write documentation for me",
          opts = {
            index = 11,
            is_slash_cmd = false,
            auto_submit = false,
            short_name = "docs",
          },
          references = {
            {
              type = "file",
              path = {
                "doc/.vitepress/config.mjs",
                "lua/codecompanion/config.lua",
                "README.md",
              },
            },
          },
          prompts = {
            {
              role = "user",
              content = [[I'm rewriting the documentation for my plugin CodeCompanion.nvim, as I'm moving to a vitepress website. Can you help me rewrite it?

              I'm sharing my vitepress config file so you have the context of how the documentation website is structured in the `sidebar` section of that file.

              I'm also sharing my `config.lua` file which I'm mapping to the `configuration` section of the sidebar.
              ]],
            },
          },
        },
nvim_codecompanion_prompt_library: |
      prompt_library = {
        {{ nvim_codecompanion_prompt_library_docusaurus }}
      },
nvim_ai_companion:
  lazy: |
    {
      "olimorris/codecompanion.nvim",
      dependencies = {
        "nvim-lua/plenary.nvim",
        "nvim-treesitter/nvim-treesitter",
      },
      config = true
    },
  config: |
    require("codecompanion").setup({
      strategies = {
        chat = {
          adapter = "{{ ai_adapter_chat }}",
        },
        inline = {
          adapter = "{{ ai_adapter_inline }}",
        },
        cmd = {
          adapter = "{{ ai_adapter_cmd }}",
        },
      },
      {{ nvim_codecompanion_adapter_config }}
      {{ nvim_codecompanion_prompt_library }}
    })
    -- Expand 'cc' into 'CodeCompanion' in the command line
    -- vim.cmd([[cab cc CodeCompanion]])
  keymaps: |
    -- { '<leader>Cc', {
    --   n = '<cmd>CodeCompanion ',
    --   v = '<cmd>CodeCompanion ',
    -- }, description = 'CodeCompanion: Chat', },
    { '<leader>Ct', { n = '<cmd>CodeCompanionChat Toggle<CR>', }, description = 'CodeCompanion: Toggle Chat Window', },
    { '<leader>Ca', { n = '<cmd>CodeCompanionActions<CR>', }, description = 'CodeCompanion: Actions', },
    { '<leader>Ce', { n = '<cmd>lua require("codecompanion").prompt("explain")<CR>', }, description = 'CodeCompanion: Explain', },
nvim_ai_avante:
  lazy: |
    {
      "yetone/avante.nvim",
      event = "VeryLazy",
      lazy = false,
      version = false, -- set this if you want to always pull the latest change
      opts = {
        provider = "{{ ai_adapter_avante }}",
      },
      -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
      build = "make",
      -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
      dependencies = {
        "stevearc/dressing.nvim",
        "nvim-lua/plenary.nvim",
        "MunifTanjim/nui.nvim",
        --- The below dependencies are optional,
        "hrsh7th/nvim-cmp", -- autocompletion for avante commands and mentions
        "nvim-tree/nvim-web-devicons", -- or echasnovski/mini.icons
        "zbirenbaum/copilot.lua", -- for providers='copilot'
        {
          -- Make sure to set this up properly if you have lazy=true
          'MeanderingProgrammer/render-markdown.nvim',
          opts = {
            file_types = { "markdown", "Avante" },
          },
          ft = { "markdown", "Avante" },
        },
      },
    },
  config: ""
  keymaps: |
    { '<leader>C', { n = '<cmd>AvanteToggle<CR>', }, description = 'Avante: Toggle Chat', },
