---
nushell_config_dir: "{{ xdg_config_dir }}/nushell"
nu_devbox_env: ""
nu_homebrew_env: ""
nu_nonroot_env: ""
nushell_path_env: |
  {% for path_info in path_directories -%}
  {% if path_directories[path_info]['prepend'] == false %}
  {{ "$env.PATH = ($env.PATH | split row (char esep) | append '" + path_directories[path_info]['path'] + "')" }}
  {% else %}
  {{ "$env.PATH = ($env.PATH | split row (char esep) | prepend '" + path_directories[path_info]['path'] + "')" }}
  {% endif %}
  {% endfor %}
nushell_env: |
  {% for env_var in env_variables | dict2items -%}
  $env.{{ env_var.key | upper }} = "{{ env_var.value }}"
  {% endfor %}
nushell_fzf_path: "$env.PATH = ($env.PATH | split row (char esep) | append '{{ fzf_path }}')"
nushell_fzf_env: |
  {{ nushell_fzf_path }}
  {% for fzf_env_var in fzf_env -%}
  {{ "$env." + fzf_env[fzf_env_var]['name'] + " = '" + fzf_env[fzf_env_var]['env'] + "'" }}
  {% endfor %}
  $env.SKIM_DEFAULT_COMMAND = '{{ fd_exe }} --type f || git ls-tree -r --name-only HEAD || {{ rg_exe }} --files || find .'
nushell_atuin_config_file: "{{ atuin_dir }}/init.nu"
nushell_carapace_config_file: "{{ carapace_dir }}/init.nu"
nushell_atuin_config: |
  source {{ nushell_atuin_config_file }}
nushell_atuin_env: |
  {{ atuin_exe }} init nu | save {{ nushell_atuin_config_file }}
nushell_carapace_config: |
  source {{ nushell_carapace_config_file }}
nushell_carapace_env: |
  {{ carapace_exe }} _carapace nushell | save --force {{ nushell_carapace_config_file }}
nushell_starship_env: |
  {{ starship_exe }} init nu | save -f {{ nushell_starship_source }}
nushell_custom_config: |
  $env.config = {
    show_banner: false
    edit_mode: vi
    keybindings: [
      {
        name: find_with_fzf
        modifier: CONTROL
        keycode: Char_t
        mode: vi_insert
        event: {
            send: executehostcommand
            cmd: "commandline edit --insert ({{ fzf_exe }} --layout=reverse)"
        }
      }
      {
        name: run_cmd_navi
        modifier: CONTROL
        keycode: Char_a
        mode: vi_insert
        event: {
            send: executehostcommand
            cmd: "commandline edit --insert ({{ navi_exe }} --print)"
        }
      }
    ]
  }
nushell_fzf_config: |
  # alias cdg = cd ({{ bin_directory }}cdscuts_glob_echo | {{ fzf_exe }} | decode utf-8 | str trim)
  # alias fcd = cd (ls | where type == dir | each { |it| $it.name} | str join (char nl) | {{ fzf_exe }} | decode utf-8 | str trim)
  alias fcd = cd ({{ fd_exe }} -H -t d -E .git | {{ fzf_exe }} | decode utf-8 | str trim)
  alias ffe = {{ nvim_exe }} ({{ fzf_exe }} --layout=reverse)
nushell_yazi_config: |
  def --env yy [...args] {
    let tmp = (mktemp -t "yazi-cwd.XXXXX")
    {{ yazi_exe }} ...$args --cwd-file $tmp
    let cwd = (open $tmp)
    if $cwd != "" and $cwd != $env.PWD {
      cd $cwd
    }
    rm -fp $tmp
  }
nushell_navi_config: |
  {% for category, commands in navi_cheats.items() %}
  {% for cmd_name, cmd_info in commands.items() %}
  {{ "def nr-" + cmd_name + " [...args] {" }}
      navi --fzf-overrides "--exact --with-nth 1,2" --query "{{ cmd_name }} ::" --best-match
  {{ "}" }}
  {% endfor %}
  {% endfor %}
nushell_nvim_config: |
  {% for nvim_profile_name in nvim_xdg_modular_profiles -%}
  {{ "def vim-" + nvim_xdg_modular_profiles[nvim_profile_name]['name'] + " [...args] {" }}
  {{ "    $env.NVIM_APPNAME = 'nvim-" + nvim_xdg_modular_profiles[nvim_profile_name]['name'] + "-modular'" }}
  {{ "    " + nvim_exe + " ...$args" }}
  {{ "}" }}
  {% endfor %}
nushell_aliases: |
  {% for shell_alias in shell_aliases | dict2items -%}
  {% if shell_alias.value.nu is defined %}
  alias {{ shell_alias.key }} = {{ shell_alias.value.nu }}
  {% elif shell_alias.value.nu_def is defined %}
  def {{ shell_alias.value.nu_def.flags }} {{ shell_alias.key }} [{{ shell_alias.value.nu_def.args }}] {
    {{ shell_alias.value.nu_def.body }}
  }
  {% endif %}
  {% endfor %}
nushell_extra_aliases: |
  {% for shell_alias in extra_shell_aliases | dict2items -%}
  {% if shell_alias.value.nu is defined %}
  alias {{ shell_alias.key }} = {{ shell_alias.value.nu }}
  {% endif %}
  {% endfor %}
nushell_zellij_aliases: |
  {% for zellij_layout in zellij_kdl_layouts -%}
  alias z{{ zellij_layout }} = {{ zellij_exe }} --layout {{ zellij_kdl_layouts[zellij_layout]['name'] }}
  {% endfor %}
nushell_starship_dir: "{{ xdg_cache_dir }}/starship"
nushell_starship_source: "{{ nushell_starship_dir }}/init.nu"
nushell_starship_config: |
  use {{ nushell_starship_source }}
