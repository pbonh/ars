nvim_snacks:
  lazy: |
    {
      "folke/snacks.nvim",
      priority = 1000,
      lazy = false,
      ---@type snacks.Config
      opts = {
        bigfile = { enabled = true },
        dashboard = {
          enabled = true,
          sections = {
            { section = "header" },
            {
              pane = 2,
              section = "terminal",
              cmd = "{{ bin_directory }}/color.slim",
              height = 5,
              padding = 1,
            },
            { section = "keys", gap = 1, padding = 1 },
            { pane = 2, icon = " ", title = "Recent Files", section = "recent_files", indent = 2, padding = 1 },
            { pane = 2, icon = " ", title = "Projects", section = "projects", indent = 2, padding = 1 },
            {
              pane = 2,
              icon = " ",
              title = "Git Status",
              section = "terminal",
              enabled = function()
                return Snacks.git.get_root() ~= nil
              end,
              cmd = "git status --short --branch --renames",
              height = 5,
              padding = 1,
              ttl = 5 * 60,
              indent = 3,
            },
            { section = "startup" },
          },
        },
        explorer = { enabled = true },
        indent = { enabled = true },
        input = { enabled = true },
        notifier = {
          enabled = true,
          timeout = 3000,
        },
        picker = { enabled = true },
        quickfile = { enabled = false },
        scope = { enabled = true },
        scroll = { enabled = true },
        statuscolumn = { enabled = true },
        words = { enabled = true },
        styles = {
          notification = {
            wo = { wrap = true } -- Wrap notifications
          }
        }
      },
      keys = {
        -- Top Pickers & Explorer
        -- { "<leader><space>", function() Snacks.picker.smart() end, desc = "Smart Find Files" },
        { "<leader>:", function() Snacks.picker.command_history() end, desc = "Command History" },
        { "<leader>e", function() Snacks.explorer() end, desc = "File Explorer" },
        -- find
        { "<leader>fb", function() Snacks.picker.buffers() end, desc = "Buffers" },
        { "<leader>ff", function() Snacks.picker.files() end, desc = "Find Files" },
        { "<leader>fg", function() Snacks.picker.git_files() end, desc = "Find Git Files" },
        { "<leader>fp", function() Snacks.picker.projects() end, desc = "Projects" },
        { "<leader>f?", function() Snacks.picker.recent() end, desc = "Recent" },
        -- git
        -- { "<leader>gb", function() Snacks.picker.git_branches() end, desc = "Git Branches" },
        -- { "<leader>gl", function() Snacks.picker.git_log() end, desc = "Git Log" },
        -- { "<leader>gL", function() Snacks.picker.git_log_line() end, desc = "Git Log Line" },
        -- { "<leader>gs", function() Snacks.picker.git_status() end, desc = "Git Status" },
        -- { "<leader>gS", function() Snacks.picker.git_stash() end, desc = "Git Stash" },
        -- { "<leader>gd", function() Snacks.picker.git_diff() end, desc = "Git Diff (Hunks)" },
        -- { "<leader>gf", function() Snacks.picker.git_log_file() end, desc = "Git Log File" },
        -- Grep
        { "<leader>q", function() Snacks.picker.grep() end, desc = "Grep" },
        { "<leader>f/", function() Snacks.picker.lines() end, desc = "Buffer Lines" },
        { "_", function() Snacks.picker.grep_word() end, desc = "Visual selection or word", mode = { "n", "x" } },
        -- search
        { '<leader>v"', function() Snacks.picker.registers() end, desc = "Registers" },
        { '<leader>v/', function() Snacks.picker.search_history() end, desc = "Search History" },
        { "<leader>va", function() Snacks.picker.autocmds() end, desc = "Autocmds" },
        { "<leader>vb", function() Snacks.picker.lines() end, desc = "Buffer Lines" },
        { "<leader>vc", function() Snacks.picker.command_history() end, desc = "Command History" },
        { "<leader>vC", function() Snacks.picker.commands() end, desc = "Commands" },
        { "<leader>vd", function() Snacks.picker.diagnostics() end, desc = "Diagnostics" },
        { "<leader>vD", function() Snacks.picker.diagnostics_buffer() end, desc = "Buffer Diagnostics" },
        { "<leader>vh", function() Snacks.picker.help() end, desc = "Help Pages" },
        { "<leader>vH", function() Snacks.picker.highlights() end, desc = "Highlights" },
        { "<leader>vi", function() Snacks.picker.icons() end, desc = "Icons" },
        { "<leader>vj", function() Snacks.picker.jumps() end, desc = "Jumps" },
        { "<leader>vk", function() Snacks.picker.keymaps() end, desc = "Keymaps" },
        { "<leader>vl", function() Snacks.picker.loclist() end, desc = "Location List" },
        { "<leader>vm", function() Snacks.picker.marks() end, desc = "Marks" },
        { "<leader>vM", function() Snacks.picker.man() end, desc = "Man Pages" },
        { "<leader>vp", function() Snacks.picker.lazy() end, desc = "Search for Plugin Spec" },
        { "<leader>vq", function() Snacks.picker.qflist() end, desc = "Quickfix List" },
        { "<leader>vR", function() Snacks.picker.resume() end, desc = "Resume" },
        { "<leader>vu", function() Snacks.picker.undo() end, desc = "Undo History" },
        { "<leader>vC", function() Snacks.picker.colorschemes() end, desc = "Colorschemes" },
        -- LSP
        { "gd", function() Snacks.picker.lsp_definitions() end, desc = "Goto Definition" },
        { "gD", function() Snacks.picker.lsp_declarations() end, desc = "Goto Declaration" },
        { "gr", function() Snacks.picker.lsp_references() end, nowait = true, desc = "References" },
        { "gI", function() Snacks.picker.lsp_implementations() end, desc = "Goto Implementation" },
        { "gy", function() Snacks.picker.lsp_type_definitions() end, desc = "Goto T[y]pe Definition" },
        { "<leader>s", function() Snacks.picker.lsp_symbols() end, desc = "LSP Symbols" },
        { "<leader>S", function() Snacks.picker.lsp_workspace_symbols() end, desc = "LSP Workspace Symbols" },
        -- Other
        { "<leader>z",  function() Snacks.zen() end, desc = "Toggle Zen Mode" },
        { "<leader>Z",  function() Snacks.zen.zoom() end, desc = "Toggle Zoom" },
        { "<leader>.",  function() Snacks.scratch() end, desc = "Toggle Scratch Buffer" },
        { "<leader>fS",  function() Snacks.scratch.select() end, desc = "Select Scratch Buffer" },
        -- { "<leader>n",  function() Snacks.notifier.show_history() end, desc = "Notification History" },
        -- { "<leader>bd", function() Snacks.bufdelete() end, desc = "Delete Buffer" },
        -- { "<leader>gB", function() Snacks.gitbrowse() end, desc = "Git Browse", mode = { "n", "v" } },
        -- { "<leader>gg", function() Snacks.lazygit() end, desc = "Lazygit" },
        { "<leader>un", function() Snacks.notifier.hide() end, desc = "Dismiss All Notifications" },
        { "<c-/>",      function() Snacks.terminal() end, desc = "Toggle Terminal" },
        { "<c-_>",      function() Snacks.terminal() end, desc = "which_key_ignore" },
        { "]]",         function() Snacks.words.jump(vim.v.count1) end, desc = "Next Reference", mode = { "n", "t" } },
        { "[[",         function() Snacks.words.jump(-vim.v.count1) end, desc = "Prev Reference", mode = { "n", "t" } },
      },
    }
  config: ""
  keymaps: ""
